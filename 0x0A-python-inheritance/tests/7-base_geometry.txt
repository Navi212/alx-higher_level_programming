>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 1)
>>> bg.integer_validator("my_int", "HI")
Traceback (most recent call last):
	...
TypeError: HI must be an integer
>>> bg.integer_validator("my_int", -10)
Traceback (most recent call last):
ValueError: -10 must be greater than 0
	...
>>> bg.integer_validator("my_int", 0)
Traceback (most recent call last):
	...
ValueError: 0 must be greater than 0
>>> bg.integer_validator("my_int")
Traceback (most recent call last):
	...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'
>>> bg.integer_validator()
Traceback (most recent call last):
	...
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> bg.integer_validator("", 1)
>>> bg.integer_validator(,1)
	...
SyntaxError: invalid syntax
>>> bg.integer_validator("my_int", False)
Traceback (most recent call last):
	...
TypeError: False must be an integer
>>> bg.integer_validator("my_int", True)
Traceback (most recent call last):
	...
TypeError: True must be an integer
>>> bg.integer_validator("my_int", None)
Traceback (most recent call last):
	...
TypeError: None must be an integer
>>> bg.integer_validator("my_int", {1, 2, 3})
Traceback (most recent call last):
	...
TypeError: {1, 2, 3} must be an integer
>>> bg.integer_validator("my_int", (1, 2, 3))
Traceback (most recent call last):
	...
TypeError: (1, 2, 3) must be an integer
>>> bg.integer_validator("my_int", [1, 2, 3])
Traceback (most recent call last):
	...
TypeError: [1, 2, 3] must be an integer
>>> bg.integer_validator("my_int", 00)
Traceback (most recent call last):
	...
ValueError: 0 must be greater than 0
